# Напишите функцию-генератор brackets(n) всех правильных скобочных последовательностей длины 2n.
# Формат входных данных: На вход вашей программе подается единственное число n (0 ≤ n ≤ 10).
# Формат результата: Выведите все правильные скобочные последовательности длины 2n в лексикографическом порядке.

# Пример сопоставления бинарных чисел последовательностям из примера:
# ((()))  000111
# (()())  001011
# (())()  001101
# ()(())  010011
# ()()()  010101

# Подсказки:
# 1. Рекомендуется решать задачу рекурсивно, но не возбраняется и итеративный подход. 
# Обратите внимание на то, как определяется правильная последовательность в условии, — это ключ к решению.
# 2. Попробуйте сначала решить задачу без использования генераторов. Если ваша программа работает правильно,
# то она пройдет все тесты за исключением последнего.
# 3. С помощью какой конструкции можно внутри генератора отдавать значения из другого генератора?
# 4. Число правильных последовательностей длины 2n равно n-му числу Каталана.
# 5. Вам не обязательно реализовывать только одну функцию. 
# Например, вы можете написать две функции: одна отвечает за логику и принимает столько аргументов, сколько вам нужно,
# а вторая является оберткой для первой.

def brackets(n):
    op = 0
    cl = 0
    seq = []
    def foo(op, cl, seq, n):
        if op + cl < n*2:
            if op < n:
                seq.append('(')
                yield from foo(op+1, cl, seq, n)
                seq.pop()
            if op > cl:
                seq.append(')')
                yield from foo(op, cl+1, seq, n)
                seq.pop()
        else:
            yield (''.join(seq))
    yield from foo(op, cl, seq, n)
    


# def brackets_new(n):
#     def psp(n, open, close, curr):
#         if open == 0 and close == 0:
#             yield curr
#         else:
#             if open != 0:
#                 yield from psp(n, open - 1, close, curr + '(')
#             if n - open > n - close:
#                 yield from psp(n, open, close - 1, curr + ')')
#     yield from psp(n, n, n, '')

if __name__ == "__main__":
    n = int(input())
    for e in brackets(n):
        print(e)
    # print('try smth else')
    # for e in brackets_new(n):
    #     print(e)


